{"version":3,"file":"bundle.umd.min.js","sources":["../../node_modules/rdf-data-factory/lib/BlankNode.js","../../node_modules/rdf-data-factory/lib/DefaultGraph.js","../../node_modules/rdf-data-factory/lib/NamedNode.js","../../node_modules/rdf-data-factory/lib/Literal.js","../../node_modules/rdf-data-factory/lib/Quad.js","../../node_modules/rdf-data-factory/lib/Variable.js","../../node_modules/rdf-data-factory/lib/DataFactory.js","../../src/wkt-parser.ts","../../node_modules/rdf-data-factory/index.js","../../src/index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n//# sourceMappingURL=BlankNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n//# sourceMappingURL=DefaultGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n//# sourceMappingURL=NamedNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\nconst NamedNode_1 = require(\"./NamedNode\");\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n        }\n        else if (languageOrDatatype) {\n            this.language = '';\n            this.datatype = languageOrDatatype;\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language && other.datatype.equals(this.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n//# sourceMappingURL=Literal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n//# sourceMappingURL=Quad.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n//# sourceMappingURL=Variable.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map","export interface WKTGeometry{\n    type: geometryType,\n    coordinates: any\n}\n\nexport enum geometryType{\n    POINT=\"point\"\n}\n\nexport function parseWKT(wktString: string): WKTGeometry|null{\n\n    wktString = wktString.toLocaleLowerCase();\n\n    if(wktString.startsWith(\"point\")){\n        const coordinates = parsePoint(wktString);\n        return {coordinates, type: geometryType.POINT}\n    }\n\n}\n\nfunction parsePoint(wktString: string): number[]{\n    const point = wktString.split(\"(\")[1].split(\")\")[0].trim();  // Ex [\"0 0 0\"]\n    return point.split(\" \").map(p => parseFloat(p));\n}","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/BlankNode\"), exports);\n__exportStar(require(\"./lib/DataFactory\"), exports);\n__exportStar(require(\"./lib/DefaultGraph\"), exports);\n__exportStar(require(\"./lib/Literal\"), exports);\n__exportStar(require(\"./lib/NamedNode\"), exports);\n__exportStar(require(\"./lib/Quad\"), exports);\n__exportStar(require(\"./lib/Variable\"), exports);\n//# sourceMappingURL=index.js.map","import { DataFactory } from \"rdf-data-factory\";\nimport type * as RDF from '@rdfjs/types';\nimport { geometryType, parseWKT } from \"./wkt-parser\";\n\nconst DF = new DataFactory();\n\nexport const geoSPARQLFunctions = {\n\n    // geosf:distance(p1, p2, decimals)\n    'http://www.opengis.net/def/function/geosparql/distance'(args: RDF.Term[]) {\n        const decimals = args[2] != undefined ? parseFloat(args[2].value) : 8;\n        if (args[0].termType === 'Literal' && args[1].termType === 'Literal') {\n            const p1 = parseWKT(args[0].value);\n            const p2 = parseWKT(args[1].value);\n\n            if(p1 && p2){\n\n                if(p1.type == geometryType.POINT && p2.type == geometryType.POINT){\n\n                    const a = p1.coordinates[0] - p2.coordinates[0];\n                    const b = p1.coordinates[1] - p2.coordinates[1];\n                    const c = p1.coordinates[2] - p2.coordinates[2];\n        \n                    const d: number = round(Math.sqrt(a * a + b * b + c * c), decimals);\n                    // if(p1.length == 2 && p2.length == 2){\n        \n                    // } \n        \n                    return DF.literal(d.toString(), DF.namedNode('http://www.w3.org/2001/XMLSchema#decimal'));\n\n                }\n                \n            }\n            \n        }\n        return DF.literal(\"ERROR\");\n        \n    },\n\n    // geosf:sfWithin(p1, p2, decimals)\n    'http://www.opengis.net/def/function/geosparql/inside'(args: RDF.Term[]) {\n        const decimals = args[2] != undefined ? parseFloat(args[2].value) : 8;\n        if (args[0].termType === 'Literal' && args[1].termType === 'Literal') {\n            const p1 = parseWKT(args[0].value);\n            const p2 = parseWKT(args[1].value);\n\n            if(p1 && p2){\n\n                if(p1.type == geometryType.POINT && p2.type == geometryType.POINT){\n\n                    const a = p1.coordinates[0] - p2.coordinates[0];\n                    const b = p1.coordinates[1] - p2.coordinates[1];\n                    const c = p1.coordinates[2] - p2.coordinates[2];\n        \n                    const d: number = round(Math.sqrt(a * a + b * b + c * c), decimals);\n                    // if(p1.length == 2 && p2.length == 2){\n        \n                    // } \n        \n                    return DF.literal(d.toString(), DF.namedNode('http://www.w3.org/2001/XMLSchema#decimal'));\n\n                }\n                \n            }\n            \n        }\n        return DF.literal(\"ERROR\");\n        \n    }\n\n}\n\nfunction round(num: number, decimals: number = 0): number{\n    return Math.round( num * (10 ** decimals) + Number.EPSILON ) / (10 ** decimals);\n}"],"names":["Object","defineProperty","BlankNode_1","value","constructor","this","termType","equals","other","DefaultGraph_1","DefaultGraph","INSTANCE","NamedNode_1","Literal_1","require$$0","Literal","languageOrDatatype","language","datatype","RDF_LANGUAGE_STRING","XSD_STRING","NamedNode","Quad_1","subject","predicate","object","graph","Variable_1","DataFactory_1","require$$1","require$$2","require$$3","require$$4","require$$5","dataFactoryCounter","geometryType","parseWKT","wktString","toLocaleLowerCase","startsWith","coordinates","split","trim","map","p","parseFloat","parsePoint","type","POINT","options","blankNodeCounter","blankNodePrefix","namedNode","blankNode","BlankNode","literal","variable","Variable","defaultGraph","quad","Quad","fromTerm","original","fromQuad","resetBlankNodeCounter","__createBinding","create","o","m","k","k2","undefined","enumerable","get","__exportStar","exports","prototype","hasOwnProperty","call","require$$6","DF","DataFactory","geoSPARQLFunctions","args","decimals","p1","p2","a","b","c","d","round","Math","sqrt","toString","num","Number","EPSILON"],"mappings":"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"}