{"version":3,"sources":["../../src/index.ts"],"names":["DF","DataFactory","geoSPARQLFunctions","args","decimals","undefined","parseFloat","value","mf","termType","p1","p2","a","b","d","type","geometryType","POINT","Math","sqrt","POINTZ","c","round","literal","toString","namedNode","point","polygon","length","POLYGON","pg","p","pop","inside","num","Number","EPSILON"],"mappings":"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","sourcesContent":["import { DataFactory } from \"rdf-data-factory\";\nimport type * as RDF from '@rdfjs/types';\nimport { geometryType, parseWKT } from \"./wkt-parser\";\nimport pointInPolygon from \"point-in-polygon\";\n\nconst DF = new DataFactory();\n\nexport const geoSPARQLFunctions = {\n\n    // geosf:distance(p1, p2, decimals, multiplicationFactor)\n    'http://www.opengis.net/def/function/geosparql/distance'(args: RDF.Term[]) {\n        \n        // Set defaults\n        const decimals = args[2] != undefined ? parseFloat(args[2].value) : 8;\n        const mf = args[3] != undefined ? parseFloat(args[3].value) : 1;\n\n        if (args[0].termType === 'Literal' && args[1].termType === 'Literal') {\n            const p1 = parseWKT(args[0].value);\n            const p2 = parseWKT(args[1].value);\n\n            if(p1 && p2 && p1.value && p2.value){\n\n                const a = p1.value[0] - p2.value[0];\n                const b = p1.value[1] - p2.value[1];\n                let d: number;\n\n                // XY\n                if(p1.type == geometryType.POINT && p2.type == geometryType.POINT){\n                    d = Math.sqrt(a * a + b * b);\n                }\n\n                // XYZ\n                if(p1.type == geometryType.POINTZ && p2.type == geometryType.POINTZ){\n                    const c = p1.value[2] - p2.value[2]; // Get z- coordinates\n                    d = Math.sqrt(a * a + b * b + c * c);\n                }\n\n                // Apply multiplication factor and round\n                d = d * mf;\n                d = round(d, decimals);\n\n                return DF.literal(d.toString(), DF.namedNode('http://www.w3.org/2001/XMLSchema#decimal'));\n                \n            }\n            \n        }\n        return DF.literal(\"ERROR\");\n        \n    },\n\n    // geosf:inside(point, polygon)\n    'http://www.opengis.net/def/function/geosparql/inside'(args: RDF.Term[]) {\n        const decimals = args[2] != undefined ? parseFloat(args[2].value) : 8;\n        if (args[0].termType === 'Literal' && args[1].termType === 'Literal') {\n            const point = parseWKT(args[0].value);\n            const polygon = parseWKT(args[1].value);\n\n            if(point && polygon && point.value && polygon.value.length){\n\n                if(polygon.type == geometryType.POLYGON){\n\n                    const pg = polygon.value;\n                    let p: number[] = point.value;\n\n                    if(point.type == geometryType.POINTZ){\n                        // Pop last item to make XY instead of XYZ\n                        p.pop();\n                    }\n                    \n                    const inside = pointInPolygon(p, pg);\n                    return DF.literal(inside.toString(), DF.namedNode('http://www.w3.org/2001/XMLSchema#boolean'));\n\n                }\n                \n            }\n            \n        }\n        return DF.literal(\"ERROR\");\n        \n    }\n\n}\n\nfunction round(num: number, decimals: number = 0): number{\n    return Math.round( num * (10 ** decimals) + Number.EPSILON ) / (10 ** decimals);\n}"],"file":"index.js"}