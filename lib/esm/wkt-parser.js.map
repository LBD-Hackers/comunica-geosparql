{"version":3,"sources":["../../src/wkt-parser.ts"],"names":["geometryType","typeMap","POINT","POINTZ","POLYGON","POLYGONZ","parseWKT","wktString","type","getType","coordinates","parsePoint","value","parsePolygon","toLocaleLowerCase","typeStr","split","replace","Object","keys","indexOf","UNKNOWN","polygon","count","length","points","trim","map","point","push","parseStrCoordinate","console","log","strCoordinate","p","parseFloat"],"mappings":"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","sourcesContent":["export interface WKTGeometry{\n    type: geometryType,\n    value: any\n}\n\nexport enum geometryType{\n    POINT=\"point\",\n    POINTZ=\"pointz\",\n    POLYGON=\"polygon\",\n    POLYGONZ=\"polygonz\",\n    UNKNOWN=\"unknown\"\n}\n\nexport const typeMap = {\n    \"point\": geometryType.POINT,\n    \"pointz\": geometryType.POINTZ,\n    \"polygon\": geometryType.POLYGON,\n    \"polygonz\": geometryType.POLYGONZ\n}\n\nexport function parseWKT(wktString: string): WKTGeometry|null{\n\n    const type = getType(wktString);\n\n    if(type == geometryType.POINT || type == geometryType.POINTZ){\n        const coordinates = parsePoint(wktString);\n        return {value: coordinates, type}\n    }\n\n    if(type == geometryType.POLYGON){\n        const coordinates = parsePolygon(wktString);\n        return {value: coordinates, type}\n    }\n\n}\n\nfunction getType(wktString: string): geometryType{\n\n    wktString = wktString.toLocaleLowerCase();\n\n    let typeStr: string = wktString.split(\"(\")[0];  // get everything before the paranthesis\n    typeStr = typeStr.replace(/\\s+/, \"\");           // remove all white spaces\n    \n    if(Object.keys(typeMap).indexOf(typeStr) != -1){\n        return typeMap[typeStr];\n    }\n\n    return geometryType.UNKNOWN;\n}\n\nfunction parsePolygon(wktString: string): number[]{\n\n    let polygon = [];\n\n    // How many parantheses?\n    const count = wktString.split(\"(\").length;\n    \n    // Non-donut polygon\n    if(count == 2){\n        const points = wktString.split(\"(\")[1].split(\")\")[0].trim();  // Ex [\"0 0 0\"]\n        points.split(\",\").map(point => {\n            point = point.trim();\n            polygon.push(parseStrCoordinate(point));\n        });\n    }\n\n    // Donut polygon\n    else{\n        console.log(wktString);\n        console.log(\"Non-donut not yet supported!!\");\n    }\n\n    return polygon;\n}\n\nfunction parsePoint(wktString: string): number[]{\n    const point = wktString.split(\"(\")[1].split(\")\")[0].trim();  // Ex [\"0 0 0\"]\n    return parseStrCoordinate(point);\n}\n\nfunction parseStrCoordinate(strCoordinate: string): number[]{\n    return strCoordinate.split(\" \").map(p => parseFloat(p));\n}"],"file":"wkt-parser.js"}